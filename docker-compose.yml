services:

  db:
    image: postgres:12
    # command: -c config_file=/etc/postgresql.conf
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
      # - ./backend/postgresql.conf:/etc/postgresql.conf
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  elasticsearch:
    image: elasticsearch:${ELASTICSEARCH_VERSION:-8.11.0}
    hostname: elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx1g      
      - ES_SERVER=elasticsearch
      - ES_PORT=${ES_PORT?Variable not set}
      - ES_INDEX=${ES_INDEX?Variable not set}
      - ES_USER=${ES_USER?Variable not set}
      - ES_PASSWORD=${ES_PASSWORD?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./backend/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./backend/elasticsearch/snapshots:/usr/share/elasticsearch/snapshots
    env_file:
      - .env

  redis:
    image: redis:7
    command: redis-server --requirepass ${RD_PASSWORD}
    env_file:
      - .env
    environment:
      - RD_SERVER=redis
      - RD_PORT=${RD_PORT?Variable not set}
      - RD_PASSWORD=${RD_PASSWORD?Variable not set}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping -a ${RD_PASSWORD}" ]
      interval: 1s
      timeout: 5s
      retries: 5

    restart: on-failure
  
  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy      
      elasticsearch:
        condition: service_healthy
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}      
      - PG_HOST=${POSTGRES_SERVER?Variable not set}
      - PG_USER=${POSTGRES_USER?Variable not set}
      - PG_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}      
      - RD_SERVER=${RD_SERVER?Variable not set}
      - RD_PORT=${RD_PORT?Variable not set}
      - RD_PASSWORD=${RD_PASSWORD?Variable not set}
      - ES_SERVER=${ES_SERVER?Variable not set}
      - ES_PORT=${ES_PORT?Variable not set}
      - ES_INDEX=${ES_INDEX?Variable not set}
      - ES_USER=${ES_USER?Variable not set}
      - ES_PASSWORD=${ES_PASSWORD?Variable not set}
      - ELASTICSEARCH_HOST=${ES_SERVER?Variable not set}
      - ELASTICSEARCH_USER=${ES_USER?Variable not set}
      - ELASTICSEARCH_PASSWORD=${ES_PASSWORD?Variable not set}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy      
      elasticsearch:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}      
      - PG_HOST=${POSTGRES_SERVER?Variable not set}
      - PG_USER=${POSTGRES_USER?Variable not set}
      - PG_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}      
      - RD_SERVER=${RD_SERVER?Variable not set}
      - RD_PORT=${RD_PORT?Variable not set}
      - RD_PASSWORD=${RD_PASSWORD?Variable not set}
      - ES_SERVER=${ES_SERVER?Variable not set}
      - ES_PORT=${ES_PORT?Variable not set}
      - ES_INDEX=${ES_INDEX?Variable not set}
      - ES_USER=${ES_USER?Variable not set}
      - ES_PASSWORD=${ES_PASSWORD?Variable not set}
      - ELASTICSEARCH_HOST=${ES_SERVER?Variable not set}
      - ELASTICSEARCH_USER=${ES_USER?Variable not set}
      - ELASTICSEARCH_PASSWORD=${ES_PASSWORD?Variable not set}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend
  
volumes:
  app-db-data:
